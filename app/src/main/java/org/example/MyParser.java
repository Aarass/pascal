
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Aug 16 02:22:27 CEST 2025
//----------------------------------------------------

package org.example;


/** CUP v0.10k generated parser.
  * @version Sat Aug 16 02:22:27 CEST 2025
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\003\012\000\002\002\004\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\006\005" +
    "\000\002\007\005\000\002\007\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\005\000\002\012\005\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\006" +
    "\000\002\015\006\000\002\016\005\000\002\017\005\000" +
    "\002\017\003\000\002\020\005\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\004\005\001\002\000\004\002\100\001" +
    "\002\000\004\005\006\001\002\000\004\016\007\001\002" +
    "\000\010\006\ufffa\011\ufffa\012\ufffa\001\002\000\006\006" +
    "\012\012\011\001\002\000\004\016\077\001\002\000\004" +
    "\007\013\001\002\000\004\020\014\001\002\000\004\016" +
    "\007\001\002\000\004\023\017\001\002\000\004\010\066" +
    "\001\002\000\014\016\030\023\017\025\020\026\031\027" +
    "\027\001\002\000\004\005\063\001\002\000\010\007\ufff2" +
    "\024\ufff2\031\ufff2\001\002\000\006\007\ufff5\024\ufff5\001" +
    "\002\000\010\007\ufff3\024\ufff3\031\ufff3\001\002\000\010" +
    "\007\ufff4\024\ufff4\031\ufff4\001\002\000\006\007\060\024" +
    "\061\001\002\000\010\007\ufff0\024\ufff0\031\ufff0\001\002" +
    "\000\010\005\040\016\034\017\035\001\002\000\004\013" +
    "\051\001\002\000\004\005\033\001\002\000\010\007\ufff1" +
    "\024\ufff1\031\ufff1\001\002\000\010\005\040\016\034\017" +
    "\035\001\002\000\020\006\uffe8\007\uffe8\014\uffe8\015\uffe8" +
    "\024\uffe8\030\uffe8\031\uffe8\001\002\000\020\006\uffe7\007" +
    "\uffe7\014\uffe7\015\uffe7\024\uffe7\030\uffe7\031\uffe7\001\002" +
    "\000\006\006\050\014\046\001\002\000\020\006\uffe9\007" +
    "\uffe9\014\uffe9\015\uffe9\024\uffe9\030\uffe9\031\uffe9\001\002" +
    "\000\010\005\040\016\034\017\035\001\002\000\020\006" +
    "\uffeb\007\uffeb\014\uffeb\015\042\024\uffeb\030\uffeb\031\uffeb" +
    "\001\002\000\010\005\040\016\034\017\035\001\002\000" +
    "\020\006\uffea\007\uffea\014\uffea\015\uffea\024\uffea\030\uffea" +
    "\031\uffea\001\002\000\006\006\045\014\046\001\002\000" +
    "\020\006\uffe6\007\uffe6\014\uffe6\015\uffe6\024\uffe6\030\uffe6" +
    "\031\uffe6\001\002\000\010\005\040\016\034\017\035\001" +
    "\002\000\020\006\uffec\007\uffec\014\uffec\015\042\024\uffec" +
    "\030\uffec\031\uffec\001\002\000\010\007\uffee\024\uffee\031" +
    "\uffee\001\002\000\010\005\040\016\034\017\035\001\002" +
    "\000\012\007\uffed\014\046\024\uffed\031\uffed\001\002\000" +
    "\006\014\046\030\054\001\002\000\014\016\030\023\017" +
    "\025\020\026\031\027\027\001\002\000\004\031\056\001" +
    "\002\000\014\016\030\023\017\025\020\026\031\027\027" +
    "\001\002\000\010\007\uffe5\024\uffe5\031\uffe5\001\002\000" +
    "\014\016\030\023\017\025\020\026\031\027\027\001\002" +
    "\000\012\007\ufff7\010\ufff7\024\ufff7\031\ufff7\001\002\000" +
    "\006\007\ufff6\024\ufff6\001\002\000\004\016\064\001\002" +
    "\000\004\006\065\001\002\000\010\007\uffef\024\uffef\031" +
    "\uffef\001\002\000\004\002\001\001\002\000\006\016\007" +
    "\023\uffff\001\002\000\006\016\ufffd\023\ufffd\001\002\000" +
    "\006\011\072\012\011\001\002\000\006\021\073\022\075" +
    "\001\002\000\006\016\ufff9\023\ufff9\001\002\000\006\016" +
    "\ufffc\023\ufffc\001\002\000\006\016\ufff8\023\ufff8\001\002" +
    "\000\006\016\ufffe\023\ufffe\001\002\000\010\006\ufffb\011" +
    "\ufffb\012\ufffb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\014\001\001\000\010\005\066\006\067\007\070" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\020\011\031\012\024\013\021\014\023\015\022\016\020" +
    "\022\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\052\020\040\021" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\035\020\040\021\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\043\020\040\021\036\001\001\000" +
    "\002\001\001\000\004\021\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\046\021" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\051\020\040\021\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\031\013\054\014\023\015\022" +
    "\016\020\022\025\001\001\000\002\001\001\000\016\011" +
    "\031\013\056\014\023\015\022\016\020\022\025\001\001" +
    "\000\002\001\001\000\016\011\031\013\061\014\023\015" +
    "\022\016\020\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\075\007\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IfNar ::= IF Izraz THEN Naredba ELSE Naredba 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao IfNar"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Fizraz ::= LEFTPAR Izraz RIGHTPAR 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Fizraz"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Fizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Fizraz ::= CONST 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Fizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Fizraz ::= ID 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Fizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Pizraz ::= Fizraz 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Pizraz"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*Pizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Pizraz ::= Pizraz STAR Fizraz 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*Pizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Izraz ::= Pizraz 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Izraz"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Izraz ::= Izraz PLUS Pizraz 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Dodela ::= ID ASSIGN Izraz 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Dodela"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*Dodela*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Izlaz ::= WRITE LEFTPAR Izraz RIGHTPAR 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Izlaz"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Ulaz ::= READ LEFTPAR ID RIGHTPAR 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Ulaz"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Naredba ::= IfNar 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Naredba"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Naredba ::= Blok 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Naredba ::= Dodela 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Naredba ::= Izlaz 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Naredba ::= Ulaz 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NizNar ::= Naredba 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao NizNar"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NizNar ::= NizNar SEMI Naredba 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Blok ::= BEGIN NizNar END 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Blok"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Blok*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tip ::= CHAR 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Tip"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Tip*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Tip ::= INTEGER 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Tip*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NizImena ::= ID 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao NizImena"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NizImena ::= NizImena COMMA ID 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Deklaracija ::= NizImena COLON Tip 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Deklaracija"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*Deklaracija*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NizDekl ::= Deklaracija 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao NizDekl"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*NizDekl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NizDekl ::= NizDekl Deklaracija 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*NizDekl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeklProm ::= VAR NizDekl 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao DeklProm"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(2/*DeklProm*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI DeklProm Blok DOT 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Program"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

