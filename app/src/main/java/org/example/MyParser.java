
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Aug 18 00:30:17 CEST 2025
//----------------------------------------------------

package org.example;

import java.util.*;
import symbolTable.*;
import org.example.helper.*;

/** CUP v0.10k generated parser.
  * @version Mon Aug 18 00:30:17 CEST 2025
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\003\012\000\002\002\004\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\006\005" +
    "\000\002\016\005\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\007\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\006" +
    "\000\002\013\006\000\002\014\005\000\002\022\005\000" +
    "\002\022\003\000\002\021\005\000\002\021\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\023" +
    "\003\000\002\015\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\004\005\001\002\000\004\002\101\001" +
    "\002\000\004\005\006\001\002\000\004\030\007\001\002" +
    "\000\010\006\ufffa\011\ufffa\012\ufffa\001\002\000\006\006" +
    "\012\012\011\001\002\000\004\030\100\001\002\000\004" +
    "\007\013\001\002\000\004\016\014\001\002\000\004\030" +
    "\007\001\002\000\004\021\017\001\002\000\004\010\067" +
    "\001\002\000\014\021\017\023\020\024\031\025\027\030" +
    "\030\001\002\000\004\005\064\001\002\000\010\007\ufff2" +
    "\022\ufff2\027\ufff2\001\002\000\006\007\ufff5\022\ufff5\001" +
    "\002\000\010\007\ufff3\022\ufff3\027\ufff3\001\002\000\010" +
    "\007\ufff4\022\ufff4\027\ufff4\001\002\000\006\007\061\022" +
    "\062\001\002\000\010\007\ufff0\022\ufff0\027\ufff0\001\002" +
    "\000\010\005\041\030\034\031\035\001\002\000\004\013" +
    "\052\001\002\000\004\005\033\001\002\000\010\007\ufff1" +
    "\022\ufff1\027\ufff1\001\002\000\010\005\041\030\034\031" +
    "\035\001\002\000\020\006\uffe8\007\uffe8\014\uffe8\015\uffe8" +
    "\022\uffe8\026\uffe8\027\uffe8\001\002\000\020\006\uffe5\007" +
    "\uffe5\014\uffe5\015\uffe5\022\uffe5\026\uffe5\027\uffe5\001\002" +
    "\000\006\006\051\014\047\001\002\000\020\006\uffe7\007" +
    "\uffe7\014\uffe7\015\uffe7\022\uffe7\026\uffe7\027\uffe7\001\002" +
    "\000\020\006\uffe9\007\uffe9\014\uffe9\015\uffe9\022\uffe9\026" +
    "\uffe9\027\uffe9\001\002\000\010\005\041\030\034\031\035" +
    "\001\002\000\020\006\uffeb\007\uffeb\014\uffeb\015\043\022" +
    "\uffeb\026\uffeb\027\uffeb\001\002\000\010\005\041\030\034" +
    "\031\035\001\002\000\020\006\uffea\007\uffea\014\uffea\015" +
    "\uffea\022\uffea\026\uffea\027\uffea\001\002\000\006\006\046" +
    "\014\047\001\002\000\020\006\uffe6\007\uffe6\014\uffe6\015" +
    "\uffe6\022\uffe6\026\uffe6\027\uffe6\001\002\000\010\005\041" +
    "\030\034\031\035\001\002\000\020\006\uffec\007\uffec\014" +
    "\uffec\015\043\022\uffec\026\uffec\027\uffec\001\002\000\010" +
    "\007\uffee\022\uffee\027\uffee\001\002\000\010\005\041\030" +
    "\034\031\035\001\002\000\012\007\uffed\014\047\022\uffed" +
    "\027\uffed\001\002\000\006\014\047\026\055\001\002\000" +
    "\014\021\017\023\020\024\031\025\027\030\030\001\002" +
    "\000\004\027\057\001\002\000\014\021\017\023\020\024" +
    "\031\025\027\030\030\001\002\000\010\007\uffe4\022\uffe4" +
    "\027\uffe4\001\002\000\014\021\017\023\020\024\031\025" +
    "\027\030\030\001\002\000\012\007\ufff7\010\ufff7\022\ufff7" +
    "\027\ufff7\001\002\000\006\007\ufff6\022\ufff6\001\002\000" +
    "\004\030\065\001\002\000\004\006\066\001\002\000\010" +
    "\007\uffef\022\uffef\027\uffef\001\002\000\004\002\001\001" +
    "\002\000\006\021\uffff\030\007\001\002\000\006\021\ufffd" +
    "\030\ufffd\001\002\000\006\011\073\012\011\001\002\000" +
    "\006\017\074\020\076\001\002\000\006\021\ufff9\030\ufff9" +
    "\001\002\000\006\021\ufffc\030\ufffc\001\002\000\006\021" +
    "\ufff8\030\ufff8\001\002\000\006\021\ufffe\030\ufffe\001\002" +
    "\000\010\006\ufffb\011\ufffb\012\ufffb\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\014\001\001\000\010\005\067\006\070\016\071" +
    "\001\001\000\004\007\015\001\001\000\002\001\001\000" +
    "\020\007\031\010\024\011\021\012\023\013\022\014\020" +
    "\015\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\037\021\041\022" +
    "\053\023\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\037\021\041\022\035\023" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\037\021\041\022\044\023\036\001\001\000\002\001\001" +
    "\000\006\020\043\023\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\037\021\047" +
    "\023\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\037\021\041\022\052\023\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\031\011\055\012" +
    "\023\013\022\014\020\015\025\001\001\000\002\001\001" +
    "\000\016\007\031\011\057\012\023\013\022\014\020\015" +
    "\025\001\001\000\002\001\001\000\016\007\031\011\062" +
    "\012\023\013\022\014\020\015\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\076\016" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  table = new SymbolTable();
  errorCount = 0;

    }


  SymbolTable table;
  int errorCount;

  public int getLine()
  {
    return (( Yylex ) getScanner()).getLine();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IfNar ::= IF Izraz THEN Naredba ELSE Naredba 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		
    System.out.println("Prepoznao IfNar");

    if (i.tkind != Type.INTEGER) {
      System.out.println("Greska. Uslov if naredbe mora biti tipa integer");
      parser.errorCount++;
    }
  
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Konstanta ::= CONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		 
      Type type = parser.table.getType(c.type);

      if (type.tkind == Type.INTEGER) {
	RESULT = new Constant(type, ((IntConst) c).value);
      } else if (type.tkind == Type.CHARACTER) {
	RESULT = new Constant(type, ((CharConst) c).value);
      } else {
	throw new Exception("Lexer error");
      }
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Fizraz ::= LEFTPAR Izraz RIGHTPAR 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 
      System.out.println("Prepoznao Fizraz");

      RESULT = i.type;
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*Fizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Fizraz ::= Konstanta 
            {
              Type RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		 
      System.out.println("Prepoznao Fizraz");

      RESULT = c.type;
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*Fizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Fizraz ::= ID 
            {
              Type RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		 
    System.out.println("Prepoznao Fizraz");

    Variable vr = parser.table.getVar(id);

    if (vr == null) {
      System.out.println("Greska. Promenljiva nije deklarisana.");
      parser.errorCount++;
    } else {
      if (vr.last_def == -1) {
	System.out.println("Greska. Koriscenje promenljive kojoj nije dodeljena vrednost.");
	parser.errorCount++;
      }

      RESULT = vr.type;
    }
  
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*Fizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Pizraz ::= Fizraz 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
      System.out.println("Prepoznao Pizraz");

      RESULT = i.type;
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Pizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Pizraz ::= Pizraz STAR Fizraz 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		 
      System.out.println("Prepoznao Pizraz");

      if (i1.tkind == Type.INTEGER && i1.type != i2.type) {
	System.out.println("Greska. Operator * radi samo sa operandima tipa integer");
	parser.errorCount++;
      }

      RESULT = i1.type;
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Pizraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Izraz ::= Pizraz 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		 
      System.out.println("Prepoznao Izraz");

      RESULT = i.type;
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Izraz ::= Izraz PLUS Pizraz 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		 
      System.out.println("Prepoznao Izraz");

      if (i1.tkind == Type.INTEGER && i1.type != i2.type) {
	System.out.println("Greska. Operator + radi samo sa operandima tipa integer");
	parser.errorCount++;
      }

      RESULT = i1.type;
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Dodela ::= ID ASSIGN Izraz 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Type exp = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		 
    System.out.println("Prepoznao Dodela");

    Variable vr = parser.table.getVar(id);

    if (vr == null) {
      System.out.println("Greska. Promenljiva nije deklarisana.");
      parser.errorCount++;
    } else {
      vr.last_def = parser.getLine();

      if (vr.type != exp) {
	System.out.println("Greska. Tip izraza nije u skladu sa tipom promenljive kojoj se dodeljuje");
	parser.errorCount++;
      }

    }
  
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Dodela*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Izlaz ::= WRITE LEFTPAR Izraz RIGHTPAR 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Izlaz"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Ulaz ::= READ LEFTPAR ID RIGHTPAR 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
    System.out.println("Prepoznao Ulaz");

    Variable vr = parser.table.getVar(id);
    if (vr == null) {
      System.out.println("Greska. Promenljiva nije deklarisana.");
      parser.errorCount++;
    } else {
      vr.last_def = parser.getLine();
    }
  
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Naredba ::= IfNar 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Naredba"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Naredba ::= Blok 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Naredba ::= Dodela 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Naredba ::= Izlaz 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Naredba ::= Ulaz 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NizNar ::= Naredba 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao NizNar"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NizNar ::= NizNar SEMI Naredba 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Blok ::= BEGIN NizNar END 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Blok"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*Blok*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tip ::= CHAR 
            {
              Type RESULT = null;
		
      System.out.println("Prepoznao Tip");

      RESULT = parser.table.getType("char");
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*Tip*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Tip ::= INTEGER 
            {
              Type RESULT = null;
		
      System.out.println("Prepoznao Tip");

      RESULT = parser.table.getType("integer");
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*Tip*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NizImena ::= ID 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
      RESULT = new ArrayList<String>();
      RESULT.add(id);
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NizImena ::= NizImena COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
      RESULT = niz;
      RESULT.add(id);
    
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Deklaracija ::= NizImena COLON Tip 
            {
              Object RESULT = null;
		int imenaleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int imenaright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList imena = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Type tip = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
    System.out.println("Prepoznao Deklaracija"); 

    for (String ime : (ArrayList<String>)imena) {
      boolean result = parser.table.addVar(ime, tip);

      if (result == false) {
	System.out.println("Greska. Promenljiva je vec deklarisana");
	parser.errorCount++;
      }
    }
  
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*Deklaracija*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NizDekl ::= Deklaracija 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao NizDekl"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*NizDekl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NizDekl ::= NizDekl Deklaracija 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*NizDekl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeklProm ::= VAR NizDekl 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao DeklProm"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(2/*DeklProm*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI DeklProm Blok DOT 
            {
              Object RESULT = null;
		 System.out.println("Prepoznao Program"); 
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

